"""Initial migration

Revision ID: fa0757804bdd
Revises: 
Create Date: 2025-07-11 17:45:35.600779

"""
from alembic import op
import sqlalchemy as sa
from src.utils.dialect import get_json_type

SQLiteJSON = get_json_type()


# revision identifiers, used by Alembic.
revision = 'fa0757804bdd'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('monitored_sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('TELEGRAM', 'DISCORD', 'X', 'WEBSITE', 'DEX', 'GITHUB', 'RSS', 'REDDIT', 'BONK', name='sourcetype'), nullable=False),
    sa.Column('identifier', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('added_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_processed_id', sa.String(), nullable=True),
    sa.Column('last_scanned_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('meta_data', SQLiteJSON, nullable=True),
    sa.Column('scan_interval', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='alertpriority'), nullable=True),
    sa.Column('custom_filters', sa.JSON(), nullable=True),
    sa.Column('monitored_trends', sa.JSON(), nullable=True),
    sa.Column('trend_thresholds', sa.JSON(), nullable=True),
    sa.Column('notification_channels', sa.JSON(), nullable=True),
    sa.Column('alert_template', sa.String(), nullable=True),
    sa.Column('silence_hours', sa.JSON(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('sentiment_analysis', sa.Boolean(), nullable=True),
    sa.Column('pattern_learning', sa.Boolean(), nullable=True),
    sa.Column('smart_filtering', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_monitored_sources_active', 'monitored_sources', ['is_active'], unique=False)
    op.create_index('idx_monitored_sources_identifier', 'monitored_sources', ['identifier'], unique=False)
    op.create_index('idx_monitored_sources_priority', 'monitored_sources', ['priority'], unique=False)
    op.create_index('idx_monitored_sources_type', 'monitored_sources', ['type'], unique=False)
    op.create_table('output_channels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('identifier', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_announcements', sa.Boolean(), nullable=True),
    sa.Column('is_alerts', sa.Boolean(), nullable=True),
    sa.Column('is_stats', sa.Boolean(), nullable=True),
    sa.Column('custom_format', sa.Text(), nullable=True),
    sa.Column('emoji_style', sa.String(length=50), nullable=True),
    sa.Column('include_stats', sa.Boolean(), nullable=True),
    sa.Column('include_links', sa.Boolean(), nullable=True),
    sa.Column('messages_per_minute', sa.Integer(), nullable=True),
    sa.Column('message_count', sa.BigInteger(), nullable=True),
    sa.Column('last_message', sa.DateTime(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('last_sent', sa.DateTime(), nullable=True),
    sa.Column('total_sent', sa.BigInteger(), nullable=True),
    sa.Column('total_failed', sa.Integer(), nullable=True),
    sa.Column('average_latency', sa.Float(), nullable=True),
    sa.Column('channel_settings', SQLiteJSON, nullable=True),
    sa.Column('backup_channels', SQLiteJSON, nullable=True),
    sa.Column('forward_to', SQLiteJSON, nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('alerts', sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='alertpriority'), nullable=False))
    op.add_column('alerts', sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('alerts', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('alerts', 'token_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('alerts', 'alert_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PRICE', 'VOLUME', 'HOLDERS', 'MINT', 'TRADE', 'SOCIAL', 'CONTRACT', 'LIQUIDITY', 'SECURITY', 'CUSTOM', name='alerttype'),
               nullable=False)
    op.alter_column('alerts', 'message',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('alerts', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=False)
    op.create_index(op.f('ix_alerts_id'), 'alerts', ['id'], unique=False)
    op.drop_column('alerts', 'metrics')
    op.drop_column('alerts', 'message_id')
    op.drop_column('alerts', 'status')
    op.drop_column('alerts', 'verdict')
    op.drop_column('alerts', 'channel_id')
    op.drop_column('alerts', 'is_deleted')
    op.add_column('monitored_groups', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('monitored_groups', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('token_mentions', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('token_mentions', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('token_metrics', sa.Column('engagement_score', sa.Float(), nullable=True))
    op.add_column('token_metrics', sa.Column('meta_data', src.utils.sqlite_json.SQLiteJSON(), nullable=True))
    op.alter_column('token_metrics', 'token_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('token_metrics', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=False)
    op.create_index('idx_token_metrics_market_cap', 'token_metrics', ['market_cap'], unique=False)
    op.create_index('idx_token_metrics_price', 'token_metrics', ['price'], unique=False)
    op.create_index('idx_token_metrics_token_date', 'token_metrics', ['token_id', 'created_at'], unique=False)
    op.create_index('idx_token_metrics_volume', 'token_metrics', ['volume_24h'], unique=False)
    op.create_unique_constraint('uq_token_metrics_timestamp', 'token_metrics', ['token_id', 'created_at'])
    op.drop_constraint(None, 'token_metrics', type_='foreignkey')
    op.create_foreign_key(None, 'token_metrics', 'tokens', ['token_id'], ['id'], ondelete='CASCADE')
    op.drop_column('token_metrics', 'raw_metrics')
    op.drop_column('token_metrics', 'hype_score')
    op.drop_column('token_metrics', 'safety_score')
    op.drop_column('token_metrics', 'whale_transaction_count')
    op.drop_column('token_metrics', 'liquidity_usd')
    op.drop_column('token_metrics', 'extra_data')
    op.add_column('token_scores', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('token_scores', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('tokens', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.create_index('idx_token_blacklisted', 'tokens', ['is_blacklisted'], unique=False)
    op.create_index('idx_token_created_at', 'tokens', ['created_at'], unique=False)
    op.create_index('idx_token_symbol_address', 'tokens', ['symbol', 'address'], unique=False)
    op.create_index(op.f('ix_tokens_address'), 'tokens', ['address'], unique=True)
    op.create_index(op.f('ix_tokens_name'), 'tokens', ['name'], unique=False)
    op.create_index(op.f('ix_tokens_symbol'), 'tokens', ['symbol'], unique=False)
    op.drop_column('tokens', 'blacklisted_at')
    op.drop_column('tokens', 'blacklist_reason')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tokens', sa.Column('blacklist_reason', sa.TEXT(), nullable=True))
    op.add_column('tokens', sa.Column('blacklisted_at', sa.DATETIME(), nullable=True))
    op.drop_index(op.f('ix_tokens_symbol'), table_name='tokens')
    op.drop_index(op.f('ix_tokens_name'), table_name='tokens')
    op.drop_index(op.f('ix_tokens_address'), table_name='tokens')
    op.drop_index('idx_token_symbol_address', table_name='tokens')
    op.drop_index('idx_token_created_at', table_name='tokens')
    op.drop_index('idx_token_blacklisted', table_name='tokens')
    op.drop_column('tokens', 'updated_at')
    op.drop_column('token_scores', 'updated_at')
    op.drop_column('token_scores', 'created_at')
    op.add_column('token_metrics', sa.Column('extra_data', sa.TEXT(), nullable=True))
    op.add_column('token_metrics', sa.Column('liquidity_usd', sa.NUMERIC(precision=20, scale=2), nullable=True))
    op.add_column('token_metrics', sa.Column('whale_transaction_count', sa.INTEGER(), nullable=True))
    op.add_column('token_metrics', sa.Column('safety_score', sa.FLOAT(), nullable=True))
    op.add_column('token_metrics', sa.Column('hype_score', sa.FLOAT(), nullable=True))
    op.add_column('token_metrics', sa.Column('raw_metrics', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'token_metrics', type_='foreignkey')
    op.create_foreign_key(None, 'token_metrics', 'tokens', ['token_id'], ['id'])
    op.drop_constraint('uq_token_metrics_timestamp', 'token_metrics', type_='unique')
    op.drop_index('idx_token_metrics_volume', table_name='token_metrics')
    op.drop_index('idx_token_metrics_token_date', table_name='token_metrics')
    op.drop_index('idx_token_metrics_price', table_name='token_metrics')
    op.drop_index('idx_token_metrics_market_cap', table_name='token_metrics')
    op.alter_column('token_metrics', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True)
    op.alter_column('token_metrics', 'token_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('token_metrics', 'meta_data')
    op.drop_column('token_metrics', 'engagement_score')
    op.drop_column('token_mentions', 'updated_at')
    op.drop_column('token_mentions', 'created_at')
    op.drop_column('monitored_groups', 'updated_at')
    op.drop_column('monitored_groups', 'created_at')
    op.add_column('alerts', sa.Column('is_deleted', sa.BOOLEAN(), nullable=True))
    op.add_column('alerts', sa.Column('channel_id', sa.BIGINT(), nullable=True))
    op.add_column('alerts', sa.Column('verdict', sa.VARCHAR(length=20), nullable=True))
    op.add_column('alerts', sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'"), nullable=True))
    op.add_column('alerts', sa.Column('message_id', sa.INTEGER(), nullable=True))
    op.add_column('alerts', sa.Column('metrics', sa.TEXT(), nullable=True))
    op.drop_index(op.f('ix_alerts_id'), table_name='alerts')
    op.alter_column('alerts', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True)
    op.alter_column('alerts', 'message',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('alerts', 'alert_type',
               existing_type=sa.Enum('PRICE', 'VOLUME', 'HOLDERS', 'MINT', 'TRADE', 'SOCIAL', 'CONTRACT', 'LIQUIDITY', 'SECURITY', 'CUSTOM', name='alerttype'),
               type_=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('alerts', 'token_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('alerts', 'updated_at')
    op.drop_column('alerts', 'processed_at')
    op.drop_column('alerts', 'priority')
    op.drop_table('output_channels')
    op.drop_index('idx_monitored_sources_type', table_name='monitored_sources')
    op.drop_index('idx_monitored_sources_priority', table_name='monitored_sources')
    op.drop_index('idx_monitored_sources_identifier', table_name='monitored_sources')
    op.drop_index('idx_monitored_sources_active', table_name='monitored_sources')
    op.drop_table('monitored_sources')
    # ### end Alembic commands ###
